// ... existing code ...

// --- ·ª®ng d·ª•ng Qu·∫£n l√Ω ƒêi·ªÉm Thi (Exam Score Tracker) ---
class Student {
  constructor(id, name, className) {
    this.id = id;
    this.name = name;
    this.className = className;
    this.examScores = [];
  }

  // Th√™m ƒëi·ªÉm thi
  addExamScore(examName, score) {
    if (score < 0 || score > 10) {
      throw new Error('ƒêi·ªÉm thi ph·∫£i t·ª´ 0 ƒë·∫øn 10.');
    }
    this.examScores.push({ examName, score, date: new Date().toLocaleDateString('vi-VN') });
    console.log(`ƒê√£ th√™m ƒëi·ªÉm ${examName}: ${score} cho ${this.name}`);
  }

  // T√≠nh ƒëi·ªÉm trung b√¨nh
  getAverageScore() {
    if (this.examScores.length === 0) return 0;
    const total = this.examScores.reduce((sum, exam) => sum + exam.score, 0);
    return (total / this.examScores.length).toFixed(2);
  }

  // L·∫•y ƒëi·ªÉm cao nh·∫•t
  getHighestScore() {
    if (this.examScores.length === 0) return 0;
    return Math.max(...this.examScores.map(exam => exam.score));
  }

  // L·∫•y ƒëi·ªÉm th·∫•p nh·∫•t
  getLowestScore() {
    if (this.examScores.length === 0) return 0;
    return Math.min(...this.examScores.map(exam => exam.score));
  }

  // Hi·ªÉn th·ªã th√¥ng tin h·ªçc sinh
  displayInfo() {
    console.log(`\nüìö H·ªåC SINH: ${this.name} (ID: ${this.id})`);
    console.log(`L·ªõp: ${this.className}`);
    console.log(`ƒêi·ªÉm trung b√¨nh: ${this.getAverageScore()}`);
    console.log(`ƒêi·ªÉm cao nh·∫•t: ${this.getHighestScore()}`);
    console.log(`ƒêi·ªÉm th·∫•p nh·∫•t: ${this.getLowestScore()}`);
    
    if (this.examScores.length > 0) {
      console.log('\nüìù Chi ti·∫øt ƒëi·ªÉm thi:');
      this.examScores.forEach(exam => {
        console.log(`  ${exam.examName}: ${exam.score} (${exam.date})`);
      });
    }
  }
}

class ExamTracker {
  constructor() {
    this.students = [];
    this.nextStudentId = 1;
  }

  // Th√™m h·ªçc sinh m·ªõi
  addStudent(name, className) {
    if (!name || name.trim() === '') {
      throw new Error('T√™n h·ªçc sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }
    
    const student = new Student(this.nextStudentId++, name.trim(), className || 'Ch∆∞a ph√¢n l·ªõp');
    this.students.push(student);
    console.log(`‚úÖ ƒê√£ th√™m h·ªçc sinh: ${student.name} (ID: ${student.id})`);
  }

  // T√¨m h·ªçc sinh theo ID
  findStudent(id) {
    return this.students.find(s => s.id === id);
  }

  // T√¨m h·ªçc sinh theo t√™n
  findStudentByName(name) {
    const lowerName = name.toLowerCase();
    return this.students.filter(s => 
      s.name.toLowerCase().includes(lowerName)
    );
  }

  // Th√™m ƒëi·ªÉm thi cho h·ªçc sinh
  addExamScore(studentId, examName, score) {
    const student = this.findStudent(studentId);
    if (!student) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi ID ${studentId}.`);
    }
    student.addExamScore(examName, score);
  }

  // Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng
  displayRanking() {
    if (this.students.length === 0) {
      console.log('Ch∆∞a c√≥ h·ªçc sinh n√†o.');
      return;
    }

    // S·∫Øp x·∫øp theo ƒëi·ªÉm trung b√¨nh gi·∫£m d·∫ßn
    const rankedStudents = [...this.students].sort((a, b) => 
      parseFloat(b.getAverageScore()) - parseFloat(a.getAverageScore())
    );

    console.log('\nüèÜ B·∫¢NG X·∫æP H·∫†NG THEO ƒêI·ªÇM TRUNG B√åNH üèÜ');
    console.log('‚îÄ'.repeat(80));
    console.log('H·∫°ng | ID  | T√™n h·ªçc sinh'.padEnd(30) + '| L·ªõp'.padEnd(15) + '| ƒêTB'.padEnd(8) + '| Cao nh·∫•t | Th·∫•p nh·∫•t');
    console.log('‚îÄ'.repeat(80));

    rankedStudents.forEach((student, index) => {
      const rank = index + 1;
      const rankSymbol = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : `${rank}.`;
      const name = student.name.padEnd(25);
      const className = student.className.padEnd(12);
      const avgScore = student.getAverageScore().padEnd(6);
      const highest = student.getHighestScore().toString().padEnd(8);
      const lowest = student.getLowestScore().toString();
      
      console.log(`${rankSymbol.padEnd(5)} | ${student.id.toString().padEnd(3)} | ${name} | ${className} | ${avgScore} | ${highest} | ${lowest}`);
    });
    console.log('‚îÄ'.repeat(80));
  }

  // Th·ªëng k√™ l·ªõp
  getClassStats() {
    if (this.students.length === 0) {
      console.log('Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™.');
      return;
    }

    const totalStudents = this.students.length;
    const studentsWithScores = this.students.filter(s => s.examScores.length > 0);
    
    if (studentsWithScores.length === 0) {
      console.log('Ch∆∞a c√≥ ƒëi·ªÉm thi n√†o.');
      return;
    }

    const allScores = studentsWithScores.flatMap(s => s.examScores.map(exam => exam.score));
    const avgClassScore = (allScores.reduce((sum, score) => sum + score, 0) / allScores.length).toFixed(2);
    const highestClassScore = Math.max(...allScores);
    const lowestClassScore = Math.min(...allScores);

    console.log('\nüìä TH·ªêNG K√ä L·ªöP');
    console.log(`T·ªïng s·ªë h·ªçc sinh: ${totalStudents}`);
    console.log(`S·ªë h·ªçc sinh c√≥ ƒëi·ªÉm: ${studentsWithScores.length}`);
    console.log(`ƒêi·ªÉm trung b√¨nh l·ªõp: ${avgClassScore}`);
    console.log(`ƒêi·ªÉm cao nh·∫•t l·ªõp: ${highestClassScore}`);
    console.log(`ƒêi·ªÉm th·∫•p nh·∫•t l·ªõp: ${lowestClassScore}`);
    
    // Ph√¢n lo·∫°i h·ªçc l·ª±c
    const excellent = studentsWithScores.filter(s => parseFloat(s.getAverageScore()) >= 8).length;
    const good = studentsWithScores.filter(s => {
      const avg = parseFloat(s.getAverageScore());
      return avg >= 6.5 && avg < 8;
    }).length;
    const average = studentsWithScores.filter(s => {
      const avg = parseFloat(s.getAverageScore());
      return avg >= 5 && avg < 6.5;
    }).length;
    const below = studentsWithScores.filter(s => parseFloat(s.getAverageScore()) < 5).length;

    console.log('\nüìà PH√ÇN LO·∫†I H·ªåC L·ª∞C:');
    console.log(`Gi·ªèi (‚â•8.0): ${excellent} h·ªçc sinh`);
    console.log(`Kh√° (6.5-7.9): ${good} h·ªçc sinh`);
    console.log(`Trung b√¨nh (5.0-6.4): ${average} h·ªçc sinh`);
    console.log(`Y·∫øu (<5.0): ${below} h·ªçc sinh`);
  }

  // T√¨m ki·∫øm h·ªçc sinh
  searchStudents(keyword) {
    const found = this.findStudentByName(keyword);
    if (found.length === 0) {
      console.log(`Kh√¥ng t√¨m th·∫•y h·ªçc sinh n√†o c√≥ t√™n ch·ª©a "${keyword}"`);
      return;
    }
    
    console.log(`\nüîç K·∫øt qu·∫£ t√¨m ki·∫øm cho "${keyword}":`);
    found.forEach(student => {
      student.displayInfo();
    });
  }

  // X√≥a h·ªçc sinh
  removeStudent(id) {
    const index = this.students.findIndex(s => s.id === id);
    if (index === -1) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi ID ${id}.`);
    }
    const [removed] = this.students.splice(index, 1);
    console.log(`üóëÔ∏è ƒê√£ x√≥a h·ªçc sinh: ${removed.name} (ID: ${removed.id})`);
  }

  // Hi·ªÉn th·ªã t·∫•t c·∫£ h·ªçc sinh
  listAllStudents() {
    if (this.students.length === 0) {
      console.log('Ch∆∞a c√≥ h·ªçc sinh n√†o.');
      return;
    }

    console.log('\nüìã DANH S√ÅCH T·∫§T C·∫¢ H·ªåC SINH:');
    this.students.forEach(student => {
      console.log(`ID: ${student.id} | ${student.name} | L·ªõp: ${student.className} | ƒêTB: ${student.getAverageScore()}`);
    });
  }
}

// Kh·ªüi t·∫°o Exam Tracker v√† giao di·ªán
const examTracker = new ExamTracker();
const rl5 = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function showExamTrackerMenu() {
  console.log('\nüìö QU·∫¢N L√ù ƒêI·ªÇM THI üìö');
  console.log('1. Th√™m h·ªçc sinh m·ªõi');
  console.log('2. Th√™m ƒëi·ªÉm thi');
  console.log('3. Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng');
  console.log('4. Xem th√¥ng tin h·ªçc sinh');
  console.log('5. T√¨m ki·∫øm h·ªçc sinh');
  console.log('6. Th·ªëng k√™ l·ªõp');
  console.log('7. Danh s√°ch t·∫•t c·∫£ h·ªçc sinh');
  console.log('8. X√≥a h·ªçc sinh');
  console.log('0. Tho√°t');
  rl5.question('Ch·ªçn ch·ª©c nƒÉng: ', handleExamTrackerMenu);
}

function handleExamTrackerMenu(choice) {
  switch (choice.trim()) {
    case '1':
      addStudentFlow();
      break;
    case '2':
      addExamScoreFlow();
      break;
    case '3':
      examTracker.displayRanking();
      showExamTrackerMenu();
      break;
    case '4':
      viewStudentInfoFlow();
      break;
    case '5':
      searchStudentFlow();
      break;
    case '6':
      examTracker.getClassStats();
      showExamTrackerMenu();
      break;
    case '7':
      examTracker.listAllStudents();
      showExamTrackerMenu();
      break;
    case '8':
      removeStudentFlow();
      break;
    case '0':
      rl5.close();
      break;
    default:
      console.log('L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
      showExamTrackerMenu();
  }
}

function addStudentFlow() {
  rl5.question('Nh·∫≠p t√™n h·ªçc sinh: ', (name) => {
    rl5.question('Nh·∫≠p t√™n l·ªõp (b·ªè qua n·∫øu kh√¥ng c√≥): ', (className) => {
      try {
        examTracker.addStudent(name, className);
      } catch (e) {
        console.error('L·ªói:', e.message);
      }
      showExamTrackerMenu();
    });
  });
}

function addExamScoreFlow() {
  rl5.question('Nh·∫≠p ID h·ªçc sinh: ', (studentId) => {
    rl5.question('Nh·∫≠p t√™n b√†i thi: ', (examName) => {
      rl5.question('Nh·∫≠p ƒëi·ªÉm (0-10): ', (score) => {
        try {
          examTracker.addExamScore(Number(studentId), examName, Number(score));
        } catch (e) {
          console.error('L·ªói:', e.message);
        }
        showExamTrackerMenu();
      });
    });
  });
}

function viewStudentInfoFlow() {
  rl5.question('Nh·∫≠p ID h·ªçc sinh c·∫ßn xem: ', (studentId) => {
    const student = examTracker.findStudent(Number(studentId));
    if (student) {
      student.displayInfo();
    } else {
      console.log('Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi ID n√†y.');
    }
    showExamTrackerMenu();
  });
}

function searchStudentFlow() {
  rl5.question('Nh·∫≠p t√™n h·ªçc sinh c·∫ßn t√¨m: ', (keyword) => {
    examTracker.searchStudents(keyword);
    showExamTrackerMenu();
  });
}

function removeStudentFlow() {
  rl5.question('Nh·∫≠p ID h·ªçc sinh c·∫ßn x√≥a: ', (studentId) => {
    try {
      examTracker.removeStudent(Number(studentId));
    } catch (e) {
      console.error('L·ªói:', e.message);
    }
    showExamTrackerMenu();
  });
}

rl5.on('close', () => {
  console.log('ƒê√£ tho√°t ·ª©ng d·ª•ng Qu·∫£n l√Ω ƒêi·ªÉm Thi.');
});

// B·ªè comment d√≤ng sau ƒë·ªÉ ch·∫°y th·ª≠ Exam Score Tracker ƒë·ªôc l·∫≠p
// showExamTrackerMenu();
