// ·ª®ng d·ª•ng qu·∫£n l√Ω chi ti√™u (Expense Tracker)
// Ghi l·∫°i c√°c kho·∫£n chi ti√™u v·ªõi danh m·ª•c, s·ªë ti·ªÅn, ng√†y
// T√≠nh t·ªïng chi ti√™u theo th√°ng/tu·∫ßn

const readline = require('readline');

// 1. Class ƒë·∫°i di·ªán cho m·ªôt kho·∫£n chi ti√™u
class Expense {
  constructor(id, category, description, amount, date) {
    this.id = id;
    this.category = category;
    this.description = description;
    this.amount = amount;
    this.date = date;
  }
}

// 2. Class qu·∫£n l√Ω chi ti√™u
class ExpenseTracker {
  constructor() {
    this.expenses = [];
    this.nextId = 1;
    this.categories = [
      'ƒÇn u·ªëng',
      'Di chuy·ªÉn',
      'Mua s·∫Øm',
      'Gi·∫£i tr√≠',
      'S·ª©c kh·ªèe',
      'H·ªçc t·∫≠p',
      'Nh√† c·ª≠a',
      'Kh√°c'
    ];
  }

  // Th√™m kho·∫£n chi ti√™u m·ªõi
  addExpense(category, description, amount, date) {
    if (!this.categories.includes(category)) {
      throw new Error('Danh m·ª•c kh√¥ng h·ª£p l·ªá.');
    }
    if (amount <= 0) {
      throw new Error('S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.');
    }
    if (!description || description.trim() === '') {
      throw new Error('M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }

    const expense = new Expense(
      this.nextId++,
      category,
      description.trim(),
      Number(amount),
      date || new Date()
    );
    
    this.expenses.push(expense);
    console.log(`‚úÖ ƒê√£ th√™m chi ti√™u: ${description} - ${amount.toLocaleString('vi-VN')}ƒë`);
  }

  // X√≥a kho·∫£n chi ti√™u
  removeExpense(id) {
    const index = this.expenses.findIndex(e => e.id === id);
    if (index === -1) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y kho·∫£n chi ti√™u v·ªõi ID ${id}.`);
    }
    const [removed] = this.expenses.splice(index, 1);
    console.log(`üóëÔ∏è ƒê√£ x√≥a chi ti√™u: ${removed.description}`);
  }

  // Hi·ªÉn th·ªã t·∫•t c·∫£ chi ti√™u
  listExpenses() {
    if (this.expenses.length === 0) {
      console.log('üìù Ch∆∞a c√≥ kho·∫£n chi ti√™u n√†o.');
      return;
    }

    console.log('\nüìã DANH S√ÅCH CHI TI√äU');
    console.log('‚îÄ'.repeat(100));
    console.log('ID  | Danh m·ª•c'.padEnd(15) + '| M√¥ t·∫£'.padEnd(25) + '| S·ªë ti·ªÅn'.padEnd(15) + '| Ng√†y');
    console.log('‚îÄ'.repeat(100));

    this.expenses.forEach(expense => {
      const id = expense.id.toString().padEnd(4);
      const category = expense.category.padEnd(12);
      const description = expense.description.padEnd(22);
      const amount = expense.amount.toLocaleString('vi-VN').padEnd(12);
      const date = expense.date.toLocaleDateString('vi-VN');
      console.log(`${id} | ${category} | ${description} | ${amount}ƒë | ${date}`);
    });
    console.log('‚îÄ'.repeat(100));
  }

  // T√≠nh t·ªïng chi ti√™u theo th√°ng
  getMonthlyTotal(year, month) {
    const filtered = this.expenses.filter(expense => {
      const expenseDate = new Date(expense.date);
      return expenseDate.getFullYear() === year && 
             expenseDate.getMonth() === month - 1;
    });

    const total = filtered.reduce((sum, expense) => sum + expense.amount, 0);
    const monthName = new Date(year, month - 1).toLocaleDateString('vi-VN', { month: 'long' });
    
    console.log(`\nüìä CHI TI√äU TH√ÅNG ${monthName.toUpperCase()} ${year}`);
    console.log(`T·ªïng chi ti√™u: ${total.toLocaleString('vi-VN')}ƒë`);
    console.log(`S·ªë kho·∫£n chi ti√™u: ${filtered.length}`);
    
    // Th·ªëng k√™ theo danh m·ª•c
    const categoryStats = {};
    filtered.forEach(expense => {
      categoryStats[expense.category] = (categoryStats[expense.category] || 0) + expense.amount;
    });

    if (Object.keys(categoryStats).length > 0) {
      console.log('\nChi ti√™u theo danh m·ª•c:');
      Object.entries(categoryStats)
        .sort(([,a], [,b]) => b - a)
        .forEach(([category, amount]) => {
          const percentage = ((amount / total) * 100).toFixed(1);
          console.log(`  ${category}: ${amount.toLocaleString('vi-VN')}ƒë (${percentage}%)`);
        });
    }
  }

  // T√≠nh t·ªïng chi ti√™u theo tu·∫ßn
  getWeeklyTotal(year, week) {
    const startOfYear = new Date(year, 0, 1);
    const startOfWeek = new Date(startOfYear);
    startOfWeek.setDate(startOfYear.getDate() + (week - 1) * 7);
    
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);

    const filtered = this.expenses.filter(expense => {
      const expenseDate = new Date(expense.date);
      return expenseDate >= startOfWeek && expenseDate <= endOfWeek;
    });

    const total = filtered.reduce((sum, expense) => sum + expense.amount, 0);
    
    console.log(`\nüìä CHI TI√äU TU·∫¶N ${week} NƒÇM ${year}`);
    console.log(`T·ª´: ${startOfWeek.toLocaleDateString('vi-VN')} ƒë·∫øn: ${endOfWeek.toLocaleDateString('vi-VN')}`);
    console.log(`T·ªïng chi ti√™u: ${total.toLocaleString('vi-VN')}ƒë`);
    console.log(`S·ªë kho·∫£n chi ti√™u: ${filtered.length}`);
  }

  // T√¨m ki·∫øm chi ti√™u
  searchExpenses(keyword) {
    const lowerKeyword = keyword.toLowerCase();
    const found = this.expenses.filter(expense =>
      expense.description.toLowerCase().includes(lowerKeyword) ||
      expense.category.toLowerCase().includes(lowerKeyword)
    );

    if (found.length === 0) {
      console.log(`üîç Kh√¥ng t√¨m th·∫•y kho·∫£n chi ti√™u n√†o ch·ª©a "${keyword}"`);
      return;
    }

    console.log(`\nüîç K·∫æT QU·∫¢ T√åM KI·∫æM CHO "${keyword}":`);
    console.log('‚îÄ'.repeat(100));
    found.forEach(expense => {
      const id = expense.id.toString().padEnd(4);
      const category = expense.category.padEnd(12);
      const description = expense.description.padEnd(22);
      const amount = expense.amount.toLocaleString('vi-VN').padEnd(12);
      const date = expense.date.toLocaleDateString('vi-VN');
      console.log(`${id} | ${category} | ${description} | ${amount}ƒë | ${date}`);
    });
    console.log('‚îÄ'.repeat(100));
  }

  // Th·ªëng k√™ t·ªïng quan
  getOverallStats() {
    if (this.expenses.length === 0) {
      console.log('üìä Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™.');
      return;
    }

    const total = this.expenses.reduce((sum, expense) => sum + expense.amount, 0);
    const avg = total / this.expenses.length;
    const maxExpense = this.expenses.reduce((max, expense) => 
      expense.amount > max.amount ? expense : max
    );
    const minExpense = this.expenses.reduce((min, expense) => 
      expense.amount < min.amount ? expense : min
    );

    console.log('\nüìä TH·ªêNG K√ä T·ªîNG QUAN');
    console.log(`T·ªïng s·ªë kho·∫£n chi ti√™u: ${this.expenses.length}`);
    console.log(`T·ªïng chi ti√™u: ${total.toLocaleString('vi-VN')}ƒë`);
    console.log(`Chi ti√™u trung b√¨nh: ${avg.toLocaleString('vi-VN')}ƒë`);
    console.log(`Chi ti√™u cao nh·∫•t: ${maxExpense.amount.toLocaleString('vi-VN')}ƒë (${maxExpense.description})`);
    console.log(`Chi ti√™u th·∫•p nh·∫•t: ${minExpense.amount.toLocaleString('vi-VN')}ƒë (${minExpense.description})`);
  }

  // Hi·ªÉn th·ªã danh m·ª•c c√≥ s·∫µn
  showCategories() {
    console.log('\nüìÇ DANH M·ª§C CHI TI√äU:');
    this.categories.forEach((category, index) => {
      console.log(`${index + 1}. ${category}`);
    });
  }
}

// 3. Giao di·ªán ng∆∞·ªùi d√πng
const tracker = new ExpenseTracker();
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function showMenu() {
  console.log('\nüí∞ QU·∫¢N L√ù CHI TI√äU üí∞');
  console.log('1. Th√™m kho·∫£n chi ti√™u');
  console.log('2. Xem danh s√°ch chi ti√™u');
  console.log('3. X√≥a kho·∫£n chi ti√™u');
  console.log('4. T√¨m ki·∫øm chi ti√™u');
  console.log('5. Th·ªëng k√™ theo th√°ng');
  console.log('6. Th·ªëng k√™ theo tu·∫ßn');
  console.log('7. Th·ªëng k√™ t·ªïng quan');
  console.log('8. Xem danh m·ª•c');
  console.log('0. Tho√°t');
  rl.question('Ch·ªçn ch·ª©c nƒÉng: ', handleMenu);
}

function handleMenu(choice) {
  switch (choice.trim()) {
    case '1':
      addExpenseFlow();
      break;
    case '2':
      tracker.listExpenses();
      showMenu();
      break;
    case '3':
      removeExpenseFlow();
      break;
    case '4':
      searchExpenseFlow();
      break;
    case '5':
      monthlyStatsFlow();
      break;
    case '6':
      weeklyStatsFlow();
      break;
    case '7':
      tracker.getOverallStats();
      showMenu();
      break;
    case '8':
      tracker.showCategories();
      showMenu();
      break;
    case '0':
      rl.close();
      break;
    default:
      console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
      showMenu();
  }
}

function addExpenseFlow() {
  tracker.showCategories();
  rl.question('Ch·ªçn danh m·ª•c (nh·∫≠p s·ªë): ', (categoryChoice) => {
    const categoryIndex = parseInt(categoryChoice) - 1;
    if (categoryIndex < 0 || categoryIndex >= tracker.categories.length) {
      console.log('‚ùå Danh m·ª•c kh√¥ng h·ª£p l·ªá.');
      showMenu();
      return;
    }
    
    const category = tracker.categories[categoryIndex];
    rl.question('Nh·∫≠p m√¥ t·∫£: ', (description) => {
      rl.question('Nh·∫≠p s·ªë ti·ªÅn: ', (amount) => {
        rl.question('Nh·∫≠p ng√†y (dd/mm/yyyy, b·ªè tr·ªëng ƒë·ªÉ d√πng h√¥m nay): ', (dateStr) => {
          let date = new Date();
          if (dateStr.trim()) {
            const [day, month, year] = dateStr.split('/');
            date = new Date(year, month - 1, day);
          }
          
          try {
            tracker.addExpense(category, description, amount, date);
          } catch (e) {
            console.error('‚ùå L·ªói:', e.message);
          }
          showMenu();
        });
      });
    });
  });
}

function removeExpenseFlow() {
  rl.question('Nh·∫≠p ID kho·∫£n chi ti√™u c·∫ßn x√≥a: ', (id) => {
    try {
      tracker.removeExpense(parseInt(id));
    } catch (e) {
      console.error('‚ùå L·ªói:', e.message);
    }
    showMenu();
  });
}

function searchExpenseFlow() {
  rl.question('Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm: ', (keyword) => {
    tracker.searchExpenses(keyword);
    showMenu();
  });
}

function monthlyStatsFlow() {
  const currentDate = new Date();
  rl.question(`Nh·∫≠p nƒÉm (m·∫∑c ƒë·ªãnh ${currentDate.getFullYear()}): `, (year) => {
    rl.question(`Nh·∫≠p th√°ng (1-12, m·∫∑c ƒë·ªãnh ${currentDate.getMonth() + 1}): `, (month) => {
      const y = year || currentDate.getFullYear();
      const m = month || currentDate.getMonth() + 1;
      tracker.getMonthlyTotal(y, m);
      showMenu();
    });
  });
}

function weeklyStatsFlow() {
  const currentDate = new Date();
  const currentWeek = Math.ceil((currentDate.getDate() + new Date(currentDate.getFullYear(), 0, 1).getDay()) / 7);
  
  rl.question(`Nh·∫≠p nƒÉm (m·∫∑c ƒë·ªãnh ${currentDate.getFullYear()}): `, (year) => {
    rl.question(`Nh·∫≠p tu·∫ßn (1-52, m·∫∑c ƒë·ªãnh ${currentWeek}): `, (week) => {
      const y = year || currentDate.getFullYear();
      const w = week || currentWeek;
      tracker.getWeeklyTotal(y, w);
      showMenu();
    });
  });
}

// 4. Demo d·ªØ li·ªáu m·∫´u
function addSampleData() {
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(today.getDate() - 1);
  const lastWeek = new Date(today);
  lastWeek.setDate(today.getDate() - 7);

  try {
    tracker.addExpense('ƒÇn u·ªëng', 'ƒÇn tr∆∞a t·∫°i nh√† h√†ng', 150000, today);
    tracker.addExpense('Di chuy·ªÉn', 'XƒÉng xe m√°y', 50000, today);
    tracker.addExpense('Mua s·∫Øm', 'Mua qu·∫ßn √°o', 300000, yesterday);
    tracker.addExpense('Gi·∫£i tr√≠', 'Xem phim', 120000, yesterday);
    tracker.addExpense('S·ª©c kh·ªèe', 'Kh√°m b·ªánh', 200000, lastWeek);
    tracker.addExpense('H·ªçc t·∫≠p', 'Mua s√°ch', 250000, lastWeek);
    console.log('\n‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u!');
  } catch (e) {
    console.error('‚ùå L·ªói khi th√™m d·ªØ li·ªáu m·∫´u:', e.message);
  }
}

rl.on('close', () => {
  console.log('\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng qu·∫£n l√Ω chi ti√™u!');
  process.exit(0);
});

// B·∫Øt ƒë·∫ßu ·ª©ng d·ª•ng
console.log('üí∞ CH√ÄO M·ª™NG ƒê·∫æN V·ªöI ·ª®NG D·ª§NG QU·∫¢N L√ù CHI TI√äU üí∞');
addSampleData();
showMenu();
