// ·ª®ng d·ª•ng Morse Code Translator
// Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n sang m√£ Morse v√† ng∆∞·ª£c l·∫°i
// C√≥ t√≠nh nƒÉng ph√°t √¢m thanh m√£ Morse

const readline = require('readline');

// 1. ƒê·ªãnh nghƒ©a b·∫£ng m√£ Morse
const MORSE_CODE = {
  // Ch·ªØ c√°i
  'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
  'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
  'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
  'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
  'Y': '-.--', 'Z': '--..',
  
  // S·ªë
  '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-',
  '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',
  
  // D·∫•u c√¢u v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
  '.': '.-.-.-', ',': '--..--', '?': '..--..', '!': '-.-.--', ' ': ' ',
  '-': '-....-', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '&': '.-...',
  ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '_': '..--.-',
  '"': '.-..-.', '$': '...-..-', '@': '.--.-.'
};

// B·∫£ng ƒë·∫£o ng∆∞·ª£c ƒë·ªÉ chuy·ªÉn t·ª´ Morse sang text
const REVERSE_MORSE = {};
for (const [key, value] of Object.entries(MORSE_CODE)) {
  REVERSE_MORSE[value] = key;
}

// 2. Class Morse Translator
class MorseTranslator {
  constructor() {
    this.audioContext = null;
    this.oscillator = null;
    this.gainNode = null;
  }

  // Chuy·ªÉn vƒÉn b·∫£n sang m√£ Morse
  textToMorse(text) {
    if (!text || text.trim() === '') {
      throw new Error('VƒÉn b·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }

    const upperText = text.toUpperCase();
    let morseResult = '';
    
    for (let i = 0; i < upperText.length; i++) {
      const char = upperText[i];
      if (MORSE_CODE[char]) {
        morseResult += MORSE_CODE[char];
        // Th√™m kho·∫£ng c√°ch gi·ªØa c√°c k√Ω t·ª± (tr·ª´ kho·∫£ng tr·∫Øng)
        if (char !== ' ' && i < upperText.length - 1 && upperText[i + 1] !== ' ') {
          morseResult += ' ';
        }
      } else {
        throw new Error(`K√Ω t·ª± kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${char}`);
      }
    }
    
    return morseResult.trim();
  }

  // Chuy·ªÉn m√£ Morse sang vƒÉn b·∫£n
  morseToText(morse) {
    if (!morse || morse.trim() === '') {
      throw new Error('M√£ Morse kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }

    const morseWords = morse.split('   '); // 3 kho·∫£ng c√°ch = t·ª´ m·ªõi
    let textResult = '';
    
    for (let i = 0; i < morseWords.length; i++) {
      const morseChars = morseWords[i].split(' '); // 1 kho·∫£ng c√°ch = k√Ω t·ª± m·ªõi
      
      for (let j = 0; j < morseChars.length; j++) {
        const morseChar = morseChars[j];
        if (morseChar === '') continue; // B·ªè qua kho·∫£ng tr·∫Øng th·ª´a
        
        if (REVERSE_MORSE[morseChar]) {
          textResult += REVERSE_MORSE[morseChar];
        } else {
          throw new Error(`M√£ Morse kh√¥ng h·ª£p l·ªá: ${morseChar}`);
        }
      }
      
      // Th√™m kho·∫£ng c√°ch gi·ªØa c√°c t·ª´ (tr·ª´ t·ª´ cu·ªëi)
      if (i < morseWords.length - 1) {
        textResult += ' ';
      }
    }
    
    return textResult;
  }

  // Kh·ªüi t·∫°o Web Audio API (cho tr√¨nh duy·ªát)
  initAudio() {
    if (typeof window !== 'undefined' && window.AudioContext) {
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
      this.oscillator = this.audioContext.createOscillator();
      this.gainNode = this.audioContext.createGain();
      
      this.oscillator.connect(this.gainNode);
      this.gainNode.connect(this.audioContext.destination);
      
      this.oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);
      this.oscillator.type = 'sine';
    }
  }

  // Ph√°t √¢m thanh cho m·ªôt k√Ω t·ª± Morse
  async playMorseChar(morseChar, duration = 100) {
    if (!this.audioContext) {
      console.log('Audio kh√¥ng kh·∫£ d·ª•ng trong m√¥i tr∆∞·ªùng n√†y.');
      return;
    }

    return new Promise((resolve) => {
      const startTime = this.audioContext.currentTime;
      
      // Ph√°t √¢m thanh
      this.gainNode.gain.setValueAtTime(0, startTime);
      this.gainNode.gain.linearRampToValueAtTime(0.3, startTime + 0.01);
      this.gainNode.gain.linearRampToValueAtTime(0, startTime + duration / 1000);
      
      setTimeout(() => {
        resolve();
      }, duration);
    });
  }

  // Ph√°t √¢m thanh cho to√†n b·ªô m√£ Morse
  async playMorseAudio(morseText) {
    if (!this.audioContext) {
      console.log('Audio kh√¥ng kh·∫£ d·ª•ng trong m√¥i tr∆∞·ªùng n√†y.');
      return;
    }

    console.log('üéµ ƒêang ph√°t √¢m thanh m√£ Morse...');
    
    for (let i = 0; i < morseText.length; i++) {
      const char = morseText[i];
      
      if (char === '.') {
        await this.playMorseChar('.', 100);
        await this.delay(100);
      } else if (char === '-') {
        await this.playMorseChar('-', 300);
        await this.delay(100);
      } else if (char === ' ') {
        await this.delay(200);
      }
    }
    
    console.log('‚úÖ Ho√†n th√†nh ph√°t √¢m thanh.');
  }

  // H√†m delay
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Hi·ªÉn th·ªã b·∫£ng m√£ Morse
  showMorseTable() {
    console.log('\nüìã B·∫¢NG M√É MORSE');
    console.log('‚îÄ'.repeat(80));
    console.log('CH·ªÆ C√ÅI:');
    
    const letters = Object.keys(MORSE_CODE).filter(key => /^[A-Z]$/.test(key));
    for (let i = 0; i < letters.length; i += 5) {
      const row = letters.slice(i, i + 5).map(letter => 
        `${letter}: ${MORSE_CODE[letter].padEnd(6)}`
      ).join('  ');
      console.log(row);
    }
    
    console.log('\nS·ªê:');
    const numbers = Object.keys(MORSE_CODE).filter(key => /^[0-9]$/.test(key));
    for (let i = 0; i < numbers.length; i += 5) {
      const row = numbers.slice(i, i + 5).map(num => 
        `${num}: ${MORSE_CODE[num].padEnd(6)}`
      ).join('  ');
      console.log(row);
    }
    
    console.log('\nD·∫§U C√ÇU:');
    const punctuation = Object.keys(MORSE_CODE).filter(key => 
      /^[.,?!\-/()&:;=+_"$@]$/.test(key)
    );
    for (let i = 0; i < punctuation.length; i += 3) {
      const row = punctuation.slice(i, i + 3).map(punct => 
        `${punct}: ${MORSE_CODE[punct].padEnd(8)}`
      ).join('  ');
      console.log(row);
    }
    console.log('‚îÄ'.repeat(80));
  }

  // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m√£ Morse
  validateMorse(morse) {
    const validChars = /^[.\-\s]+$/;
    return validChars.test(morse);
  }

  // H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
  showInstructions() {
    console.log('\nüìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:');
    console.log('‚Ä¢ Chuy·ªÉn vƒÉn b·∫£n sang Morse: Nh·∫≠p vƒÉn b·∫£n b√¨nh th∆∞·ªùng');
    console.log('‚Ä¢ Chuy·ªÉn Morse sang vƒÉn b·∫£n: S·ª≠ d·ª•ng . cho dot, - cho dash');
    console.log('‚Ä¢ Kho·∫£ng c√°ch gi·ªØa c√°c k√Ω t·ª±: 1 space');
    console.log('‚Ä¢ Kho·∫£ng c√°ch gi·ªØa c√°c t·ª´: 3 spaces');
    console.log('‚Ä¢ V√≠ d·ª•: "HELLO WORLD" ‚Üí ".... . .-.. .-.. ---   .-- --- .-. .-.. -.."');
    console.log('‚Ä¢ V√≠ d·ª•: ".... . .-.. .-.. ---" ‚Üí "HELLO"');
  }
}

// 3. Kh·ªüi t·∫°o ·ª©ng d·ª•ng
const translator = new MorseTranslator();
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function showMenu() {
  console.log('\nüì° MORSE CODE TRANSLATOR üì°');
  console.log('1. VƒÉn b·∫£n ‚Üí M√£ Morse');
  console.log('2. M√£ Morse ‚Üí VƒÉn b·∫£n');
  console.log('3. Hi·ªÉn th·ªã b·∫£ng m√£ Morse');
  console.log('4. H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng');
  console.log('5. Ph√°t √¢m thanh m√£ Morse');
  console.log('0. Tho√°t');
  rl.question('Ch·ªçn ch·ª©c nƒÉng: ', handleMenu);
}

function handleMenu(choice) {
  switch (choice.trim()) {
    case '1':
      textToMorseFlow();
      break;
    case '2':
      morseToTextFlow();
      break;
    case '3':
      translator.showMorseTable();
      showMenu();
      break;
    case '4':
      translator.showInstructions();
      showMenu();
      break;
    case '5':
      playMorseFlow();
      break;
    case '0':
      rl.close();
      break;
    default:
      console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
      showMenu();
  }
}

function textToMorseFlow() {
  rl.question('Nh·∫≠p vƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi: ', (text) => {
    try {
      const morse = translator.textToMorse(text);
      console.log('\nüì§ K·∫æT QU·∫¢:');
      console.log(`VƒÉn b·∫£n: "${text}"`);
      console.log(`M√£ Morse: "${morse}"`);
    } catch (e) {
      console.error('‚ùå L·ªói:', e.message);
    }
    showMenu();
  });
}

function morseToTextFlow() {
  rl.question('Nh·∫≠p m√£ Morse c·∫ßn chuy·ªÉn ƒë·ªïi: ', (morse) => {
    try {
      if (!translator.validateMorse(morse)) {
        console.error('‚ùå M√£ Morse ch·ªâ ƒë∆∞·ª£c ch·ª©a c√°c k√Ω t·ª±: . - v√† kho·∫£ng tr·∫Øng');
        showMenu();
        return;
      }
      
      const text = translator.morseToText(morse);
      console.log('\nüì• K·∫æT QU·∫¢:');
      console.log(`M√£ Morse: "${morse}"`);
      console.log(`VƒÉn b·∫£n: "${text}"`);
    } catch (e) {
      console.error('‚ùå L·ªói:', e.message);
    }
    showMenu();
  });
}

function playMorseFlow() {
  rl.question('Nh·∫≠p m√£ Morse ƒë·ªÉ ph√°t √¢m thanh: ', async (morse) => {
    try {
      if (!translator.validateMorse(morse)) {
        console.error('‚ùå M√£ Morse ch·ªâ ƒë∆∞·ª£c ch·ª©a c√°c k√Ω t·ª±: . - v√† kho·∫£ng tr·∫Øng');
        showMenu();
        return;
      }
      
      console.log('üéµ Kh·ªüi t·∫°o audio...');
      translator.initAudio();
      
      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ audio context kh·ªüi t·∫°o
      await translator.delay(100);
      
      await translator.playMorseAudio(morse);
    } catch (e) {
      console.error('‚ùå L·ªói:', e.message);
    }
    showMenu();
  });
}

// X·ª≠ l√Ω tho√°t ch∆∞∆°ng tr√¨nh
rl.on('close', () => {
  console.log('\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Morse Code Translator!');
  process.exit(0);
});

// Demo t·ª± ƒë·ªông
console.log('üöÄ Kh·ªüi ƒë·ªông Morse Code Translator...\n');

// Th√™m m·ªôt s·ªë v√≠ d·ª• demo
try {
  console.log('üìù V√ç D·ª§ DEMO:');
  console.log('"HELLO" ‚Üí', translator.textToMorse('HELLO'));
  console.log('"WORLD" ‚Üí', translator.textToMorse('WORLD'));
  console.log('"123" ‚Üí', translator.textToMorse('123'));
  console.log('"HELLO WORLD" ‚Üí', translator.textToMorse('HELLO WORLD'));
  
  console.log('\nüîÑ CHUY·ªÇN ƒê·ªîI NG∆Ø·ª¢C:');
  console.log('".... . .-.. .-.. ---" ‚Üí', translator.morseToText('.... . .-.. .-.. ---'));
  console.log('".-- --- .-. .-.. -.." ‚Üí', translator.morseToText('.-- --- .-. .-.. -..'));
  console.log('"..--- ...-- ....-" ‚Üí', translator.morseToText('..--- ...-- ....-'));
} catch (e) {
  console.error('Demo error:', e.message);
}

// B·∫Øt ƒë·∫ßu menu ch√≠nh
showMenu();
