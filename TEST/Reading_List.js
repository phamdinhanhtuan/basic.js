// ·ª®ng d·ª•ng qu·∫£n l√Ω danh s√°ch s√°ch ƒë√£ ƒë·ªçc (Reading List)
const readline = require('readline');

// 1. ƒê·ªãnh nghƒ©a class S√°ch
class Book {
  constructor(id, title, author, status = 'ch∆∞a ƒë·ªçc') {
    this.id = id;
    this.title = title;
    this.author = author;
    this.status = status; // 'ƒë√£ ƒë·ªçc', 'ƒëang ƒë·ªçc', 'ch∆∞a ƒë·ªçc'
    this.dateAdded = new Date().toLocaleDateString('vi-VN');
    this.dateCompleted = null;
  }
}

// 2. Qu·∫£n l√Ω danh s√°ch s√°ch ƒë√£ ƒë·ªçc
class ReadingList {
  constructor() {
    this.books = [];
    this.nextId = 1;
  }

  // Th√™m s√°ch m·ªõi v√†o danh s√°ch
  addBook(title, author, status = 'ch∆∞a ƒë·ªçc') {
    if (!title || title.trim() === '') {
      throw new Error('T√™n s√°ch kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }
    if (!author || author.trim() === '') {
      throw new Error('T√™n t√°c gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }
    
    const book = new Book(this.nextId++, title.trim(), author.trim(), status);
    this.books.push(book);
    console.log(`‚úÖ ƒê√£ th√™m s√°ch: "${book.title}" - ${book.author}`);
    return book;
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªçc
  updateStatus(id, newStatus) {
    const book = this.books.find(b => b.id === id);
    if (!book) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID ${id}.`);
    }
    
    const validStatuses = ['ƒë√£ ƒë·ªçc', 'ƒëang ƒë·ªçc', 'ch∆∞a ƒë·ªçc'];
    if (!validStatuses.includes(newStatus)) {
      throw new Error('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªçn: ƒë√£ ƒë·ªçc, ƒëang ƒë·ªçc, ch∆∞a ƒë·ªçc');
    }
    
    const oldStatus = book.status;
    book.status = newStatus;
    
    // C·∫≠p nh·∫≠t ng√†y ho√†n th√†nh n·∫øu ƒë√£ ƒë·ªçc
    if (newStatus === 'ƒë√£ ƒë·ªçc') {
      book.dateCompleted = new Date().toLocaleDateString('vi-VN');
    } else {
      book.dateCompleted = null;
    }
    
    console.log(`üìñ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i "${book.title}": ${oldStatus} ‚Üí ${newStatus}`);
  }

  // X√≥a s√°ch kh·ªèi danh s√°ch
  removeBook(id) {
    const index = this.books.findIndex(b => b.id === id);
    if (index === -1) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID ${id}.`);
    }
    const [removed] = this.books.splice(index, 1);
    console.log(`üóëÔ∏è ƒê√£ x√≥a s√°ch: "${removed.title}"`);
  }

  // Hi·ªÉn th·ªã to√†n b·ªô danh s√°ch
  displayAllBooks() {
    if (this.books.length === 0) {
      console.log('üìö Danh s√°ch s√°ch tr·ªëng.');
      return;
    }

    console.log('\nüìö DANH S√ÅCH S√ÅCH ƒê√É ƒê·ªåC');
    console.log('‚îÄ'.repeat(80));
    console.log('ID | T√™n s√°ch'.padEnd(35) + '| T√°c gi·∫£'.padEnd(20) + '| Tr·∫°ng th√°i'.padEnd(12) + '| Ng√†y th√™m');
    console.log('‚îÄ'.repeat(80));

    this.books.forEach(book => {
      const statusIcon = book.status === 'ƒë√£ ƒë·ªçc' ? '‚úÖ' : 
                       book.status === 'ƒëang ƒë·ªçc' ? 'üìñ' : '‚è≥';
      const title = book.title.length > 30 ? book.title.substring(0, 27) + '...' : book.title;
      const author = book.author.length > 18 ? book.author.substring(0, 15) + '...' : book.author;
      
      console.log(`${book.id.toString().padEnd(3)} | ${title.padEnd(30)} | ${author.padEnd(15)} | ${statusIcon} ${book.status.padEnd(8)} | ${book.dateAdded}`);
    });
    console.log('‚îÄ'.repeat(80));
  }

  // Hi·ªÉn th·ªã s√°ch theo tr·∫°ng th√°i
  displayByStatus(status) {
    const filtered = this.books.filter(b => b.status === status);
    if (filtered.length === 0) {
      console.log(`üìö Kh√¥ng c√≥ s√°ch n√†o ·ªü tr·∫°ng th√°i "${status}".`);
      return;
    }

    console.log(`\nüìö S√ÅCH ${status.toUpperCase()}`);
    console.log('‚îÄ'.repeat(80));
    filtered.forEach(book => {
      const statusIcon = status === 'ƒë√£ ƒë·ªçc' ? '‚úÖ' : 
                       status === 'ƒëang ƒë·ªçc' ? 'üìñ' : '‚è≥';
      console.log(`ID: ${book.id} | "${book.title}" - ${book.author} | ${statusIcon} ${book.status}`);
      if (book.status === 'ƒë√£ ƒë·ªçc' && book.dateCompleted) {
        console.log(`   Ho√†n th√†nh: ${book.dateCompleted}`);
      }
    });
    console.log('‚îÄ'.repeat(80));
  }

  // T√¨m ki·∫øm s√°ch
  searchBooks(keyword) {
    const lower = keyword.toLowerCase();
    const found = this.books.filter(b =>
      b.title.toLowerCase().includes(lower) ||
      b.author.toLowerCase().includes(lower)
    );
    
    if (found.length === 0) {
      console.log(`üîç Kh√¥ng t√¨m th·∫•y s√°ch n√†o ch·ª©a "${keyword}"`);
      return;
    }
    
    console.log(`\nüîç K·∫æT QU·∫¢ T√åM KI·∫æM: "${keyword}"`);
    console.log('‚îÄ'.repeat(80));
    found.forEach(book => {
      const statusIcon = book.status === 'ƒë√£ ƒë·ªçc' ? '‚úÖ' : 
                       book.status === 'ƒëang ƒë·ªçc' ? 'üìñ' : '‚è≥';
      console.log(`ID: ${book.id} | "${book.title}" - ${book.author} | ${statusIcon} ${book.status}`);
    });
    console.log('‚îÄ'.repeat(80));
  }

  // Th·ªëng k√™
  getStats() {
    if (this.books.length === 0) {
      console.log('üìä Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™.');
      return;
    }

    const total = this.books.length;
    const completed = this.books.filter(b => b.status === 'ƒë√£ ƒë·ªçc').length;
    const reading = this.books.filter(b => b.status === 'ƒëang ƒë·ªçc').length;
    const pending = this.books.filter(b => b.status === 'ch∆∞a ƒë·ªçc').length;
    const completionRate = ((completed / total) * 100).toFixed(1);

    console.log('\nüìä TH·ªêNG K√ä ƒê·ªåC S√ÅCH');
    console.log('‚îÄ'.repeat(40));
    console.log(`üìö T·ªïng s·ªë s√°ch: ${total}`);
    console.log(`‚úÖ ƒê√£ ƒë·ªçc: ${completed}`);
    console.log(`üìñ ƒêang ƒë·ªçc: ${reading}`);
    console.log(`‚è≥ Ch∆∞a ƒë·ªçc: ${pending}`);
    console.log(`üìà T·ª∑ l·ªá ho√†n th√†nh: ${completionRate}%`);
    console.log('‚îÄ'.repeat(40));
  }

  // S·∫Øp x·∫øp theo t√™n s√°ch
  sortByTitle() {
    this.books.sort((a, b) => a.title.localeCompare(b.title));
    console.log('üìö ƒê√£ s·∫Øp x·∫øp theo t√™n s√°ch.');
  }

  // S·∫Øp x·∫øp theo t√°c gi·∫£
  sortByAuthor() {
    this.books.sort((a, b) => a.author.localeCompare(b.author));
    console.log('üìö ƒê√£ s·∫Øp x·∫øp theo t√°c gi·∫£.');
  }

  // S·∫Øp x·∫øp theo ng√†y th√™m
  sortByDate() {
    this.books.sort((a, b) => new Date(a.dateAdded) - new Date(b.dateAdded));
    console.log('üìö ƒê√£ s·∫Øp x·∫øp theo ng√†y th√™m.');
  }
}

// 3. Giao di·ªán ng∆∞·ªùi d√πng
const readingList = new ReadingList();
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function showMenu() {
  console.log('\nüìö QU·∫¢N L√ù DANH S√ÅCH S√ÅCH ƒê√É ƒê·ªåC üìö');
  console.log('1. Th√™m s√°ch m·ªõi');
  console.log('2. Xem t·∫•t c·∫£ s√°ch');
  console.log('3. Xem s√°ch theo tr·∫°ng th√°i');
  console.log('4. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªçc');
  console.log('5. X√≥a s√°ch');
  console.log('6. T√¨m ki·∫øm s√°ch');
  console.log('7. Th·ªëng k√™');
  console.log('8. S·∫Øp x·∫øp danh s√°ch');
  console.log('0. Tho√°t');
  rl.question('Ch·ªçn ch·ª©c nƒÉng: ', handleMenu);
}

function handleMenu(choice) {
  switch (choice.trim()) {
    case '1':
      addBookFlow();
      break;
    case '2':
      readingList.displayAllBooks();
      showMenu();
      break;
    case '3':
      showStatusMenu();
      break;
    case '4':
      updateStatusFlow();
      break;
    case '5':
      removeBookFlow();
      break;
    case '6':
      searchBookFlow();
      break;
    case '7':
      readingList.getStats();
      showMenu();
      break;
    case '8':
      showSortMenu();
      break;
    case '0':
      rl.close();
      break;
    default:
      console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
      showMenu();
  }
}

function addBookFlow() {
  rl.question('üìñ Nh·∫≠p t√™n s√°ch: ', (title) => {
    rl.question('‚úçÔ∏è Nh·∫≠p t√™n t√°c gi·∫£: ', (author) => {
      console.log('\nüìã Ch·ªçn tr·∫°ng th√°i:');
      console.log('1. Ch∆∞a ƒë·ªçc');
      console.log('2. ƒêang ƒë·ªçc');
      console.log('3. ƒê√£ ƒë·ªçc');
      rl.question('Ch·ªçn tr·∫°ng th√°i (1-3): ', (statusChoice) => {
        let status = 'ch∆∞a ƒë·ªçc';
        switch (statusChoice.trim()) {
          case '2':
            status = 'ƒëang ƒë·ªçc';
            break;
          case '3':
            status = 'ƒë√£ ƒë·ªçc';
            break;
        }
        
        try {
          readingList.addBook(title, author, status);
        } catch (e) {
          console.error('‚ùå L·ªói:', e.message);
        }
        showMenu();
      });
    });
  });
}

function showStatusMenu() {
  console.log('\nüìã Ch·ªçn tr·∫°ng th√°i ƒë·ªÉ xem:');
  console.log('1. Ch∆∞a ƒë·ªçc');
  console.log('2. ƒêang ƒë·ªçc');
  console.log('3. ƒê√£ ƒë·ªçc');
  rl.question('Ch·ªçn tr·∫°ng th√°i (1-3): ', (choice) => {
    let status = 'ch∆∞a ƒë·ªçc';
    switch (choice.trim()) {
      case '2':
        status = 'ƒëang ƒë·ªçc';
        break;
      case '3':
        status = 'ƒë√£ ƒë·ªçc';
        break;
    }
    readingList.displayByStatus(status);
    showMenu();
  });
}

function updateStatusFlow() {
  rl.question('üìñ Nh·∫≠p ID s√°ch c·∫ßn c·∫≠p nh·∫≠t: ', (id) => {
    console.log('\nüìã Ch·ªçn tr·∫°ng th√°i m·ªõi:');
    console.log('1. Ch∆∞a ƒë·ªçc');
    console.log('2. ƒêang ƒë·ªçc');
    console.log('3. ƒê√£ ƒë·ªçc');
    rl.question('Ch·ªçn tr·∫°ng th√°i (1-3): ', (statusChoice) => {
      let status = 'ch∆∞a ƒë·ªçc';
      switch (statusChoice.trim()) {
        case '2':
          status = 'ƒëang ƒë·ªçc';
          break;
        case '3':
          status = 'ƒë√£ ƒë·ªçc';
          break;
      }
      
      try {
        readingList.updateStatus(Number(id), status);
      } catch (e) {
        console.error('‚ùå L·ªói:', e.message);
      }
      showMenu();
    });
  });
}

function removeBookFlow() {
  rl.question('üóëÔ∏è Nh·∫≠p ID s√°ch c·∫ßn x√≥a: ', (id) => {
    try {
      readingList.removeBook(Number(id));
    } catch (e) {
      console.error('‚ùå L·ªói:', e.message);
    }
    showMenu();
  });
}

function searchBookFlow() {
  rl.question('üîç Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm: ', (keyword) => {
    readingList.searchBooks(keyword);
    showMenu();
  });
}

function showSortMenu() {
  console.log('\nüìö Ch·ªçn c√°ch s·∫Øp x·∫øp:');
  console.log('1. Theo t√™n s√°ch');
  console.log('2. Theo t√°c gi·∫£');
  console.log('3. Theo ng√†y th√™m');
  rl.question('Ch·ªçn c√°ch s·∫Øp x·∫øp (1-3): ', (choice) => {
    switch (choice.trim()) {
      case '1':
        readingList.sortByTitle();
        break;
      case '2':
        readingList.sortByAuthor();
        break;
      case '3':
        readingList.sortByDate();
        break;
      default:
        console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.');
    }
    showMenu();
  });
}

rl.on('close', () => {
  console.log('üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng Reading List!');
  process.exit(0);
});

// 4. Demo d·ªØ li·ªáu m·∫´u
console.log('üìö KH·ªûI T·∫†O ·ª®NG D·ª§NG READING LIST');
console.log('‚îÄ'.repeat(50));

// Th√™m m·ªôt s·ªë s√°ch m·∫´u
try {
  readingList.addBook('D·∫ø M√®n Phi√™u L∆∞u K√Ω', 'T√¥ Ho√†i', 'ƒë√£ ƒë·ªçc');
  readingList.addBook('Tu·ªïi Th∆° D·ªØ D·ªôi', 'Ph√πng Qu√°n', 'ƒëang ƒë·ªçc');
  readingList.addBook('Harry Potter v√† H√≤n ƒê√° Ph√π Th·ªßy', 'J.K. Rowling', 'ch∆∞a ƒë·ªçc');
  readingList.addBook('L√£o H·∫°c', 'Nam Cao', 'ƒë√£ ƒë·ªçc');
  readingList.addBook('S·ªë ƒê·ªè', 'V≈© Tr·ªçng Ph·ª•ng', 'ch∆∞a ƒë·ªçc');
} catch (e) {
  console.error('‚ùå L·ªói:', e.message);
}

// Hi·ªÉn th·ªã menu ch√≠nh
showMenu();
